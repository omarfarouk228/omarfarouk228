To create a Flutter application that displays a list of trending GitHub repositories using the GitHub GraphQL API with Bloc state management and Clean Architecture, we can structure the project as follows:

1. **Core Layer**: Contains business logic, entities, and use cases.
2. **Data Layer**: Handles data retrieval from the GraphQL API and any local data source if needed.
3. **Presentation Layer**: UI code and Bloc for state management.

### Core Layer

**Entities**
```dart
// lib/core/entities/repository.dart
class Repository {
  final String name;
  final String description;
  final String language;

  Repository({
    required this.name,
    required this.description,
    required this.language,
  });
}
```

**Use Cases**
```dart
// lib/core/usecases/fetch_trending_repositories.dart
import 'package:your_project_name/core/entities/repository.dart';
import 'package:your_project_name/core/repositories/repository_repository.dart';

class FetchTrendingRepositories {
  final RepositoryRepository repository;

  FetchTrendingRepositories(this.repository);

  Future<List<Repository>> call() {
    return repository.fetchTrendingRepositories();
  }
}
```

**Repository Interface**
```dart
// lib/core/repositories/repository_repository.dart
import 'package:your_project_name/core/entities/repository.dart';

abstract class RepositoryRepository {
  Future<List<Repository>> fetchTrendingRepositories();
}
```

### Data Layer

**GraphQL API Client**
```dart
// lib/data/datasources/github_graphql_api.dart
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:your_project_name/core/entities/repository.dart';

class GithubGraphQLApi {
  final GraphQLClient client;

  GithubGraphQLApi(this.client);

  Future<List<Repository>> fetchTrendingRepositories() async {
    const String query = """
      query {
        search(query: "stars:>100", type: REPOSITORY, first: 10) {
          edges {
            node {
              ... on Repository {
                name
                description
                primaryLanguage {
                  name
                }
              }
            }
          }
        }
      }
    """;

    final QueryResult result = await client.query(QueryOptions(document: gql(query)));

    if (result.hasException) {
      throw Exception(result.exception.toString());
    }

    final List<Repository> repositories = (result.data['search']['edges'] as List)
        .map((edge) => Repository(
              name: edge['node']['name'],
              description: edge['node']['description'],
              language: edge['node']['primaryLanguage']?['name'] ?? 'Unknown',
            ))
        .toList();

    return repositories;
  }
}
```

**Repository Implementation**
```dart
// lib/data/repositories/repository_repository_impl.dart
import 'package:your_project_name/core/entities/repository.dart';
import 'package:your_project_name/core/repositories/repository_repository.dart';
import 'package:your_project_name/data/datasources/github_graphql_api.dart';

class RepositoryRepositoryImpl implements RepositoryRepository {
  final GithubGraphQLApi api;

  RepositoryRepositoryImpl(this.api);

  @override
  Future<List<Repository>> fetchTrendingRepositories() {
    return api.fetchTrendingRepositories();
  }
}
```

### Presentation Layer

**Bloc Events and States**
```dart
// lib/presentation/bloc/repository_event.dart
import 'package:equatable/equatable.dart';

abstract class RepositoryEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

class FetchRepositories extends RepositoryEvent {}

// lib/presentation/bloc/repository_state.dart
import 'package:equatable/equatable.dart';
import 'package:your_project_name/core/entities/repository.dart';

abstract class RepositoryState extends Equatable {
  @override
  List<Object?> get props => [];
}

class RepositoryInitial extends RepositoryState {}

class RepositoryLoading extends RepositoryState {}

class RepositoryLoaded extends RepositoryState {
  final List<Repository> repositories;

  RepositoryLoaded(this.repositories);

  @override
  List<Object?> get props => [repositories];
}

class RepositoryError extends RepositoryState {
  final String message;

  RepositoryError(this.message);

  @override
  List<Object?> get props => [message];
}
```

**Bloc Implementation**
```dart
// lib/presentation/bloc/repository_bloc.dart
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:your_project_name/core/usecases/fetch_trending_repositories.dart';
import 'package:your_project_name/presentation/bloc/repository_event.dart';
import 'package:your_project_name/presentation/bloc/repository_state.dart';

class RepositoryBloc extends Bloc<RepositoryEvent, RepositoryState> {
  final FetchTrendingRepositories fetchTrendingRepositories;

  RepositoryBloc(this.fetchTrendingRepositories) : super(RepositoryInitial()) {
    on<FetchRepositories>(_onFetchRepositories);
  }

  Future<void> _onFetchRepositories(FetchRepositories event, Emitter<RepositoryState> emit) async {
    emit(RepositoryLoading());

    try {
      final repositories = await fetchTrendingRepositories();
      emit(RepositoryLoaded(repositories));
    } catch (e) {
      emit(RepositoryError(e.toString()));
    }
  }
}
```

**UI Implementation**
```dart
// lib/presentation/pages/repository_page.dart
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:your_project_name/presentation/bloc/repository_bloc.dart';
import 'package:your_project_name/presentation/bloc/repository_event.dart';
import 'package:your_project_name/presentation/bloc/repository_state.dart';

class RepositoryPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Trending Repositories'),
      ),
      body: BlocProvider(
        create: (context) => RepositoryBloc(/* Inject FetchTrendingRepositories use case */)
          ..add(FetchRepositories()),
        child: BlocBuilder<RepositoryBloc, RepositoryState>(
          builder: (context, state) {
            if (state is RepositoryLoading) {
              return Center(child: CircularProgressIndicator());
            } else if (state is RepositoryLoaded) {
              return ListView.builder(
                itemCount: state.repositories.length,
                itemBuilder: (context, index) {
                  final repository = state.repositories[index];
                  return ListTile(
                    title: Text(repository.name),
                    subtitle: Text(repository.description),
                    trailing: Text(repository.language),
                  );
                },
              );
            } else if (state is RepositoryError) {
              return Center(child: Text('Error: ${state.message}'));
            }
            return Center(child: Text('Start Fetching Repositories'));
          },
        ),
      ),
    );
  }
}
```

### Dependency Injection

**Setup Dependency Injection**
```dart
// lib/injection.dart
import 'package:get_it/get_it.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'package:your_project_name/core/repositories/repository_repository.dart';
import 'package:your_project_name/core/usecases/fetch_trending_repositories.dart';
import 'package:your_project_name/data/datasources/github_graphql_api.dart';
import 'package:your_project_name/data/repositories/repository_repository_impl.dart';
import 'package:your_project_name/presentation/bloc/repository_bloc.dart';

final sl = GetIt.instance;

void setup() {
  // GraphQL Client
  final HttpLink httpLink = HttpLink('https://api.github.com/graphql');
  final AuthLink authLink = AuthLink(getToken: () async => 'Bearer YOUR_GITHUB_TOKEN');
  final Link link = authLink.concat(httpLink);

  final GraphQLClient client = GraphQLClient(
    cache: GraphQLCache(store: InMemoryStore()),
    link: link,
  );

  // External
  sl.registerLazySingleton(() => client);

  // Data sources
  sl.registerLazySingleton(() => GithubGraphQLApi(sl()));

  // Repositories
  sl.registerLazySingleton<RepositoryRepository>(() => RepositoryRepositoryImpl(sl()));

  // Use cases
  sl.registerLazySingleton(() => FetchTrendingRepositories(sl()));

  // Blocs
  sl.registerFactory(() => RepositoryBloc(sl()));
}
```

**Main Application**
```dart
// lib/main.dart
import 'package:flutter/material.dart';
import 'package:your_project_name/injection.dart' as di;
import 'package:your_project_name/presentation/pages/repository_page.dart';

void main() {
  di.setup();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Clean Architecture',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RepositoryPage(),
    );
  }
}
```

### Note

1. Replace `'YOUR_GITHUB_TOKEN'` with your actual GitHub personal access token.
2. This example assumes that you have set up the `graphql_flutter` package. If not, add it to your `pubspec.yaml`.

This is a basic structure following Clean Architecture. You can further refine and expand it based on your specific requirements and add more features as needed.